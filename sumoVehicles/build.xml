<project name="sumoVehicles" default="run-gui-m25" basedir="." xmlns:sonar="antlib:org.sonar.ant">
    <description>
        sumo Vehicle build file v1
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="run-gui-m25"  location="run-gui-m25"/>
  <property name="run-m25"  location="run-m25"/>
  <property name="run-gui-bath"  location="run-gui-bath"/>
  <property name="run-bath"  location="run-bath"/>
  <property name="dist"  location="dist"/>
  <!-- Define the Sonar properties -->
<property name="sonar.projectKey" value="org.codehaus.sonar:sumoBSF" />
<property name="sonar.projectName" value="BSF SUMO component" />
<property name="sonar.projectVersion" value="1.0" />
<property name="sonar.host.url" value="http://localhost:9000/sonar" />
<property name="sonar.language" value="java" />
<property name="sonar.sources" value="src" />
<property name="sonar.binaries" value="build" />
<property name="sonar.sourceEncoding" value="UTF-8" />
<property name="sonar.jdbc.url" value="jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8" />
<property name="sonar.jdbc.driverClassName" value="com.mysql.jdbc.Driver" />
<property name="sonar.jdbc.username" value="sonar" />
<property name="sonar.jdbc.password" value="sonar" />
  
  <path id="project.class.path">
      <fileset erroronmissingdir="false" dir="${lib}/../../javaFramework/dist">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/smack">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/jena">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/sonar">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="lib">
        <include name="**/*.jar" />
    </fileset>
  </path>
  
     <condition property="is_windows">
        <os family="windows"/>
    </condition>
	<condition property="is_unix">
        <os family="unix"/>
    </condition>
  
  <property name="dep_cp" value="${toString:project.class.path}" />

  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
		
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" includeantruntime="false">
	<classpath refid="project.class.path"/>
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory and copy jar files before we define our self contained classpath -->
    <mkdir dir="${dist}"/>
    <copy todir="${dist}" flatten="true">
	<path>
		<pathelement path="${dep_cp}"/>
	</path>
    </copy>
    <copy file="${dist}/../log4j.properties" tofile="${dist}/log4j.properties" overwrite="true"/>
      
    <!-- Now can set up the paths for these jar files -->  
    <path id="dist-classpath">
	<fileset dir="${dist}">
		<include name="**/*.jar" />
	</fileset>
    </path>
    <property name="dist_cp" value="${toString:dist-classpath}" />
    <manifestclasspath property="lib.list" jarfile="sumoVehicles.jar">
	<classpath refid="dist-classpath" />
    </manifestclasspath>
      
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/sumoVehicles.jar" basedir="${build}">
	<manifest>
		<attribute name="Class-Path" value=". ${lib.list}"/>
        </manifest>
    </jar>
  </target>
  
    <target name="runWinGUIM25" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="m25"/>
	</java>
    </target>  
	
	<target name="runUnixGUIM25" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="m25"/>
	</java>
    </target> 

	<target name="runUnixGUIM25VSL" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="m25-vsl"/>
	</java>
    </target> 
	
	<target name="runWinGUIM25VSL" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="m25-vsl"/>
	</java>
    </target> 
	
	<target name="runUnixGUIM25GlobalVSL" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="m25-globalvsl"/>
	</java>
    </target> 
	
	<target name="runWinGUIM25GlobalVSL" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="m25-globavsl"/>
	</java>
    </target> 

	<target name="runUnixNOGUIM25VSL" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo"/>
		<arg value="m25-nogui-vsl"/>
	</java>
    </target> 
	
	<target name="runWinNOGUIM25VSL" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo.exe"/>
		<arg value="m25-nogui-vsl"/>
	</java>
    </target> 

	<target name="runUnixGUIM25Crash" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="m25-crash"/>
	</java>
    </target> 

	<target name="runWinGUIM25Crash" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="m25-crash"/>
	</java>
    </target> 
	
	<target name="runUnixGUIM25flash" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="m25-flash"/>
	</java>
    </target> 

	<target name="runWinGUIM25flash" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="m25-flash"/>
	</java>
    </target>
	
	<!--target name="runUnixGUIM25CrashDebug" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.sumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-guiD"/>
		<arg value="m25-crash"/>
	</java>
    </target--> 

    <target name="runWinM25" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo.exe"/>
		<arg value="m25-nogui"/>
	</java>
    </target>  
	
	<target name="runUnixM25" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo"/>
		<arg value="m25-nogui"/>
	</java>
    </target>  	
	
	<target name="runWinGUIBath" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo-gui.exe"/>
		<arg value="bath"/>
	</java>
    </target>  
	
	<target name="runUnixGUIBath" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo-gui"/>
		<arg value="bath"/>
	</java>
    </target> 

    <target name="runWinBath" depends="dist" if="is_windows">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=.\sumobin\win\sumo.exe"/>
		<arg value="bath"/>
	</java>
    </target>  
	
	<target name="runUnixBath" depends="dist" if="is_unix">
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.SumoXMPPSim" > 
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo"/>
		<arg value="bath"/>
	</java>
    </target>  
	

    <target name="run-gui-m25" depends="dist, runWinGUIM25, runUnixGUIM25" description="Run SUMO with GUI and M25 scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 

    <target name="run-gui-m25-vsl" depends="dist, runWinGUIM25VSL, runUnixGUIM25VSL" description="Run SUMO with GUI and M25 VSL scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 

    <target name="run-nogui-m25-vsl" depends="dist, runWinNOGUIM25VSL, runUnixNOGUIM25VSL" description="Run SUMO without GUI and M25 VSL scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 
	
	<target name="run-gui-m25-globalvsl" depends="dist, runWinGUIM25GlobalVSL, runUnixGUIM25GlobalVSL" description="Run SUMO with GUI and M25 Global VSL scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 

    <target name="run-gui-m25-crash" depends="dist, runWinGUIM25Crash, runUnixGUIM25Crash" description="Run SUMO with GUI and M25 crash scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 
	
	<target name="run-gui-m25-flash" depends="dist, runWinGUIM25flash, runUnixGUIM25flash" description="Run SUMO with GUI and M25 crash scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 

    <!--target name="run-gui-m25-crash-debug" depends="dist, runWinGUIM25, runUnixGUIM25CrashDebug" description="Run SUMO with GUI and M25 crash scenario">
		</target-->  

    <target name="run-m25" depends="dist, runWinM25, runUnixM25" description="Run SUMO without GUI and M25 scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target>   	

	<target name="run-gui-bath" depends="dist, runWinGUIBath, runUnixGUIBath" description="Run SUMO with GUI and Bath scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target> 

    <target name="run-bath" depends="dist, runWinBath, runUnixBath" description="Run SUMO without GUI and Bath scenario">
		<!-- messy maybe, works I hope, basically call two targets on the hope that one or the other would work -->
    </target>  

     <target name="runMOEA" depends="dist" description="Start MOEA" >
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.sumoVehicles.MOEAExperiment"> 
		<sysproperty key="java.library.path" path="${dist}"/>
		<jvmarg value="-Dit.polito.appeal.traci.sumo_exe=./sumobin/ubuntu/sumo"/>
	</java>
    </target> 

<target name="sonar" depends="compile" description="Perform sonar code analysis">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
	<classpath refid="project.class.path"/>
    </taskdef>

    <sonar:sonar />
</target>
	 
  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
