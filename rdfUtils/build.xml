<project name="RDF Utils" default="dist" basedir="." xmlns:sonar="antlib:org.sonar.ant">
    <description>
        RDF Utils build file
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="run"  location="run"/>
  <property name="dist"  location="dist"/>
  <!-- Define the Sonar properties -->
<property name="sonar.projectKey" value="org.codehaus.sonar:rdfUtilities" />
<property name="sonar.projectName" value="BSF rdfUtilities component" />
<property name="sonar.projectVersion" value="1.0" />
<property name="sonar.language" value="java" />
<property name="sonar.sources" value="src" />
<property name="sonar.binaries" value="build" />
<property name="sonar.sourceEncoding" value="UTF-8" />
<property name="sonar.jdbc.url" value="jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8" />
<property name="sonar.jdbc.driverClassName" value="com.mysql.jdbc.Driver" />
<property name="sonar.jdbc.username" value="sonar" />
<property name="sonar.jdbc.password" value="sonar" />
  
  <path id="project.class.path">
      <fileset erroronmissingdir="false" dir="${lib}/../../javaFramework/dist">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/smack">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/jena">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib}/../../javaFramework/lib/sonar">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="lib/Jason">
        <include name="**/*.jar" />
    </fileset>
    <fileset dir="lib">
        <include name="**/*.jar" />
    </fileset>
  </path>
  

  <property name="dep_cp" value="${toString:project.class.path}" />
  
  
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
   <target name="jFramework" depends="init" description="Build javaFramework">
    <ant antfile="build.xml" dir="../javaFramework" target="dist"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
		
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" includeantruntime="false">
	<classpath refid="project.class.path"/>
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory and copy jar files before we define our self contained classpath -->
    <mkdir dir="${dist}"/>
    <copy todir="${dist}" flatten="true">
	<path>
		<pathelement path="${dep_cp}"/>
	</path>
    </copy>
    <copy file="${dist}/../log4j.properties" tofile="${dist}/log4j.properties" overwrite="true"/>
      
    <!-- Now can set up the paths for these jar files -->  
    <path id="dist-classpath">
	<fileset dir="${dist}">
		<include name="**/*.jar" />
	</fileset>
    </path>
    <property name="dist_cp" value="${toString:dist-classpath}" />
    <manifestclasspath property="lib.list" jarfile="rdfTools.jar">
	<classpath refid="dist-classpath" />
    </manifestclasspath>
      
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/rdfTools.jar" basedir="${build}">
	<manifest>
                <attribute name="Main-Class" value="edu.bath.rdfUtils.rdfTest.TestRDF"/>
		<attribute name="Class-Path" value=". ${lib.list}"/>
        </manifest>
    </jar>

        <jar destfile="BSFBundle.jar">
                <zipgroupfileset dir="dist" includes="*.jar" />
                <manifest>

                <attribute name="Main-Class" value="edu.bath.rdfUtils.rdfTest.TestRDF"/>
                <attribute name="Class-Path" value=". ${lib.list}"/>

                </manifest>
        </jar>

  </target>

     <target name="run-rdfTest" depends="dist, input-rdfrunargs" description="Run RDF Test as Publisher or Subscriber" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfTest.TestRDF"> 
		<!--arg line="publish"/-->
		<arg line="${rdfTestArgs}"/>
	</java>
    </target>

     <target name="run-rdfTest-nointeract-RDF" depends="dist" description="Run RDF Test with no interaction" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfTest.TestRDF"> 
		<arg line="testMode-RDF"/>
	</java>
    </target>
     <target name="run-rdfTest-nointeract-JSON" depends="dist" description="Run RDF Test with no interaction" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfTest.TestRDF"> 
		<arg line="testMode-JSON"/>
	</java>
    </target>

     <target name="run-rdfTest-nointeract-MQTT-RDF" depends="dist" description="Run RDF Test with no interaction" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfTest.TestRDF"> 
		<arg line="testMode-MQTT-RDF"/>
	</java>
    </target>
     <target name="run-rdfTest-nointeract-MQTT-JSON" depends="dist" description="Run JSON Test with no interaction" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfTest.TestRDF"> 
		<arg line="testMode-MQTT-JSON"/>
	</java>
    </target>
    
     <target name="run-rdfDebug" depends="dist" description="Run RDF Debugger" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfDebug.DebugRDF"> 
	</java>
    </target>

     <target name="run-rdfSender" depends="dist" description="Run RDF Sender" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfSender.SendRDF"> 
	</java>
    </target>
    
     <target name="run-rdfReplayer" depends="dist" description="Run RDF Replayer" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfReplayer.RDFReplayAgent"> 
		<arg line="-Xmx512M"/>
	</java>
    </target>
	
	 <target name="run-rdfReplayer-example" depends="dist" description="Run RDF Replayer with example logged scenario" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfReplayer.RDFReplayAgent"> 
		<arg line="-Xmx512M example"/>
	</java>
    </target>
    
      <target name="run-rdfLogger-Allegro" depends="dist" description="Run RDF Logger using Allegrograph backend" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfLogger.TripleStoreAgent"> 
	</java>
    </target>

      <target name="run-rdfLogger-Sesame" depends="dist" description="Run RDF Logger using Sesame backend" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfLogger.TripleStoreSesameAgent"> 
	</java>
    </target>
	
	<target name="run-rdfAnalyser" depends="dist" description="Run RDF Analyser" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfAnalyser.RDFRepAnalyser"> 
	</java>
    </target>
	
	<target name="run-rdfMonitor" depends="dist" description="Run RDF Monitor" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfMonitor.MonitorRDF"> 
	</java>
    </target>

	<target name="run-rdfSUMOMonitor-bath" depends="dist" description="Run SUMO RDF Monitor - M25 Config" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfSUMO.SUMOMonitorRDF"> 
		<arg value="bath"/>
	</java>
    </target>

	<target name="run-rdfSUMOMonitor-m25" depends="dist" description="Run SUMO RDF Monitor - Bath Config" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfSUMO.SUMOMonitorRDF"> 
		<arg value="m25"/>
	</java>
    </target>

	<target name="run-rdfMonitorNOGUI" depends="dist" description="Run RDF Monitor" >
       <!--echo message="Dist Classpath: ${dist_cp}" /-->
        <!-- There might be a tidier way to do this, but using java -jar ignores classpath it seems -->
	<java fork="true" classpath="${dist_cp}" classname="edu.bath.rdfUtils.rdfMonitor.MonitorRDF"> 
		<arg value="nogui"/>
	</java>
    </target>
  
  <target name="input-rdfrunargs" unless="rdfTestArgs">
  <input addProperty="rdfTestArgs" message="Type the mode for rdfTest, either publishJSON, publishRDF or subscribeJSON, subscribeRDF:"/>
</target>

<target name="sonar" depends="compile" description="Perform sonar code analysis">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
	<classpath refid="project.class.path"/>
    </taskdef>
    <!-- Execute Sonar -->
    <sonar:sonar />
</target>
  
  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
